// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

import {Test, console2} from "forge-std/Test.sol";
import {DoS} from "../../src/denial-of-service/DoS.sol";
import {Strings} from "@openzeppelin/contracts/utils/Strings.sol";

contract DoSTest is Test {
    DoS public dos;

    address warmUpAddress = makeAddr("warmUp");
    address personA = makeAddr("A");
    address personB = makeAddr("B");
    address personC = makeAddr("C");

    //@audit 短时间在数组中填充大量的地址，会导致遍历判断时gas消耗过大，从而导致无法执行
    //通常发生在 没有任何外部限制的条件下， 向数组中填充大量的元素
    function setUp() public {
        dos = new DoS();
    }

    function test_denialOfService() public {
        uint256 gasStart0 = gasleft();

        // We want to warm up the storage stuff
        vm.prank(warmUpAddress);
        dos.enter();
        uint256 gasStartA = gasleft();

        vm.prank(personA);
        dos.enter();
        uint256 gasCostA = gasStartA - gasleft();

        uint256 gasStartB = gasleft();
        vm.prank(personB);
        dos.enter();
        uint256 gasCostB = gasStartB - gasleft();

        uint256 gasStartC = gasleft();
        vm.prank(personC);
        dos.enter();
        uint256 gasCostC = gasStartC - gasleft();

       

        console2.log("Gas cost A: %s", gasCostA);
        console2.log("Gas cost B: %s", gasCostB);
        console2.log("Gas cost C: %s", gasCostC);

        // The gas cost will just keep rising, making it harder and harder for new people to enter!
        assert(gasCostC > gasCostB);
        assert(gasCostB > gasCostA);
    }

    function test_dosAttack() public{
        for (uint256 i = 0; i < 10000; i++) {
            vm.prank(makeAddr(Strings.toString(i)));
            dos.enter();
            uint256 gasStart = gasleft();
            console2.log("Gas Left ", gasStart);
        }
    }

  
}
